@page "/view/actor/{domain}/{username}"

@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavManager
@inject LocalDbService DbService

<style>
    .issuer-header {
        background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);
        color: white;
        padding: 3rem 0;
        margin-bottom: 2rem;
        border-radius: 12px;
    }
    .issuer-avatar {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        border: 4px solid white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        object-fit: cover;
    }
    .issuer-stats {
        display: flex;
        gap: 2rem;
        margin-top: 2rem;
        flex-wrap: wrap;
    }
    .stat-card {
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem 2rem;
        border-radius: 8px;
        text-align: center;
    }
    .stat-number {
        font-size: 2rem;
        font-weight: 700;
    }
    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }
    .badge-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }
    
    @@media (min-width: 768px) {
        .badge-grid {
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        }
    }
    .badge-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        max-width: 100%;
    }
    .badge-card:hover {
        transform: translateY(-5px);
    }
    .badge-image {
        width: 100%;
        height: 200px;
        object-fit: contain;
        background: #f8f9fa;
        padding: 1rem;
    }
    .badge-content {
        padding: 1.5rem;
    }
    .follower-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid #f0f0f0;
    }
    .follower-card:hover {
        transform: translateX(5px);
    }
    .social-links {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }
    .social-link {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.3s ease;
    }
    .social-link:hover {
        background: rgba(255, 255, 255, 0.2);
    }
</style>

@if (isLoading)
{
    <div class="section">
        <div class="container has-text-centered">
            <div class="loader is-loading"></div>
            <p class="is-size-5 mt-3">Loading community details...</p>
        </div>
    </div>
}
else if (actor == null)
{
    <div class="section">
        <div class="container">
            <div class="notification is-warning">
                <p class="has-text-centered">Community not found.</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="issuer-header">
        <div class="container">
            <div class="columns is-vcentered">
                <div class="column is-narrow">
                    @if (!string.IsNullOrEmpty(actor.AvatarPath))
                    {
                        <img class="issuer-avatar" src="@actor.AvatarPath" alt="@actor.FullName" />
                    }
                    else
                    {
                        <div class="issuer-avatar has-background-grey-lighter">
                            <span class="icon is-large"><i class="fas fa-users fa-3x"></i></span>
                        </div>
                    }
                </div>
                <div class="column">
                    <h1 class="title is-2 has-text-white">@actor.FullName</h1>
                    <p class="subtitle is-5 has-text-white-bis">@actor.Summary</p>
                    
                    <div class="issuer-stats">
                        <div class="stat-card">
                            <div class="stat-number">@stats.IssuedCount</div>
                            <div class="stat-label">Badges Issued</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">@followers.Count</div>
                            <div class="stat-label">Followers</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">@stats.MembersCount</div>
                            <div class="stat-label">Members</div>
                        </div>
                    </div>

                    <div class="social-links">
                        <a href="@actor.InformationUri" target="_blank" class="social-link">
                            <span class="icon"><i class="fas fa-globe"></i></span>
                        </a>
                        <a href="@actor.FediverseHandle" target="_blank" class="social-link" style="display: none;">
                            <span class="icon"><i class="fab fa-mastodon"></i></span>
                        </a>
                        <a href="https://github.com/@actor.Username" target="_blank" class="social-link" style="display: none;">
                            <span class="icon"><i class="fab fa-github"></i></span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="section">
            <h2 class="title is-3 mb-5">Featured Badges</h2>
            <div class="badge-grid">
                @foreach (var badge in featuredBadges)
                {
                    <div class="badge-card">
                        <img src="@badge.Image" alt="@badge.ImageAltText" class="badge-image">
                        <div class="badge-content">
                            <h3 class="title is-5">@badge.Title</h3>
                            <p class="subtitle is-6">@badge.Description</p>
                            <span class="tag is-info">@badge.BadgeType</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="section">
            <h2 class="title is-3 mb-5">Followers</h2>
            <div class="columns is-multiline">
                @foreach (var follower in followers)
                {
                    var username = follower.FollowerUri.TrimEnd('/').Split('/').LastOrDefault();
                    var displayName = string.IsNullOrEmpty(follower.DisplayName) ? username : follower.DisplayName;

                    var image = string.IsNullOrEmpty(follower.AvatarUri) ? null : follower.AvatarUri;
                    var initials = string.Join("", displayName.Split(' ').Select(word => word[0])).ToUpper();
                    var random = new Random();
                    var randomColor = $"#{random.Next(0x1000000):X6}";
                    var r = Convert.ToInt32(randomColor.Substring(1, 2), 16);
                    var g = Convert.ToInt32(randomColor.Substring(3, 2), 16);
                    var b = Convert.ToInt32(randomColor.Substring(5, 2), 16);

                    // Ensure the color is dark enough for white text to contrast
                    if ((r * 0.299 + g * 0.587 + b * 0.114) > 186) // Luminance threshold
                    {
                        r = (int)(r * 0.5);
                        g = (int)(g * 0.5);
                        b = (int)(b * 0.5);
                    }

                    randomColor = $"#{r:X2}{g:X2}{b:X2}";

                    <div class="column is-4">
                        <div class="follower-card">
                            <div class="content">
                                <div class="media">
                                    <div class="media-left">
                                        @if (string.IsNullOrEmpty(image))
                                        {
                                            <div class="is-rounded" style="width: 48px; height: 48px; background-color: @randomColor; display: flex; align-items: center; justify-content: center; font-weight: bold; color: white;">
                                                @initials
                                            </div>
                                        }
                                        else
                                        {
                                            <figure class="image is-48x48">
                                                <img class="is-rounded" src="@image" alt="@displayName" style="margin: 0px;">
                                            </figure>
                                        }
                                    </div>
                                    <div class="media-content" style="margin-left: 12px;">
                                        <p class="title is-5">@displayName</p>
                                        <p class="subtitle is-6"><a href="@follower.FollowerUri"><span class="tag is-light is-small">@(username)@@@(follower.Domain)</span></a></p>
                                    </div>
                                </div>
                           </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? Domain { get; set; }
    [Parameter] public string? Username { get; set; }

    private Actor? actor;
    private List<Follower> followers = new();

    private ActorStats stats = new();

    private List<Badge> featuredBadges = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var acceptHeader = HttpContextAccessor.HttpContext?.Request.Headers["Accept"].ToString();

        if (BadgeFed.Core.ActivityPubHelper.IsActivityPubRequest(acceptHeader))
        {
            NavManager.NavigateTo($"/actors/{Domain}/{Username}");
        }

        LoadData();
    }

    private void LoadData()
    {
        actor = DbService.GetActorByFilter($"Username = \"{Username}\" AND Domain = \"{Domain}\"");
        
        if (actor != null)
        {
            stats = DbService.GetIssuerStats(actor);
            followers = DbService.GetFollowersByActorId(actor.Id).ToList();
            featuredBadges = DbService.GetBadgesByIssuerId(actor.Id).Take(6).ToList();
        }
        
        isLoading = false;
    }
}