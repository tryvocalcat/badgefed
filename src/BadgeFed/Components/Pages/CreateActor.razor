@page "/admin/actors/create"
@page "/admin/actors/edit/{actorId}"
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@inject LocalScopedDb LocalDbService
@inject IConfiguration Configuration
@inject FollowService FollowService
@inject CurrentUser CurrentUser
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

@layout BadgeFed.Components.Layouts.AdminLayout

@attribute [Authorize(Roles = "admin, manager")]

<style>
    .form-section {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        padding: 2rem;
        margin-bottom: 2rem;
    }
    .form-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }
    .form-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1a1a1a;
    }
    .form-subtitle {
        color: #6b7280;
        margin-top: 0.5rem;
    }
    .field-label {
        font-weight: 500;
        color: #374151;
        margin-bottom: 0.5rem;
    }
    .input, .textarea, .select select {
        border-radius: 8px;
        border: 2px solid #e9ecef;
        transition: all 0.2s ease;
    }
    .input:focus, .textarea:focus, .select select:focus {
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }
    .file-upload {
        border: 2px dashed #e9ecef;
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }
    .file-upload:hover {
        border-color: #4f46e5;
        background-color: rgba(79, 70, 229, 0.02);
    }
    .file-upload-icon {
        font-size: 2rem;
        color: #9ca3af;
        margin-bottom: 1rem;
    }
    .preview-image {
        max-width: 200px;
        max-height: 200px;
        border-radius: 8px;
        object-fit: cover;
        margin-top: 1rem;
    }
    .key-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 0.5rem;
    }
    .key-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
        font-size: 0.875rem;
    }
    .help-text {
        font-size: 0.875rem;
        color: #6b7280;
        margin-top: 0.25rem;
    }
    .submit-button {
        min-width: 120px;
    }
    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }
</style>

<div class="form-section">
    <div class="form-header">
                
        @if (string.IsNullOrEmpty(ActorId))
        {
            <h1 class="form-title">Create New Issuer</h1>
        } else {
            <h1 class="form-title">Edit Issuer @ActorId - @Model.FullName </h1>
        }
        <p class="form-subtitle">Set up a new actor to issue and manage badges</p>
    </div>

    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="actorForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="columns is-multiline">
            <div class="column is-6">
            <div class="field">
                <label class="field-label" for="name">Full Name</label>
                <div class="control">
                        <InputText id="name" @bind-Value="Model!.FullName" class="input" placeholder="Enter the issuer's name" />
                    </div>
                    <ValidationMessage For="@(() => Model.FullName)" class="help is-danger" />
                </div>
            </div>

            <div class="column is-6">
                <div class="field">
                    <label class="field-label" for="username">Username</label>
                    
                    <div class="control">
                        @if (!string.IsNullOrEmpty(ActorId))
                        {
                            <div class="input disabled is-static">@Model.Username@@@Model.Domain</div>
                            <p class="help-text">Username cannot be changed after creation</p>
                        }
                        else
                        {
                            <InputText id="username" @bind-Value="Model!.Username" class="input" placeholder="Choose a unique username" />
                            <p class="help-text">This will be the actor's handle (e.g. username@@@Model.Domain)</p>
                        }
                    </div>
                    
                    <ValidationMessage For="@(() => Model.Username)" class="help is-danger" />
                </div>
            </div>

            <div class="column is-12">
                <div class="field">
                    <label class="field-label" for="summary">Summary</label>
                    <div class="control">
                        <InputTextArea id="summary" @bind-Value="Model.Summary" class="textarea" rows="4" placeholder="Describe the actor's purpose and role" />
                    </div>
                    <ValidationMessage For="@(() => Model.Summary)" class="help is-danger" />
                </div>
            </div>

            <div class="column is-6">
                <div class="field">
                    <label class="field-label" for="theme">Profile Theme</label>
                    <div class="control">
                        <div class="select is-fullwidth">
                            <InputSelect id="theme" @bind-Value="Model!.Theme">
                                <option value="default">Default - Modern Gradient</option>
                                <option value="ocean">Ocean - Blue & Teal</option>
                                <option value="forest">Forest - Green & Earth</option>
                                <option value="sunset">Sunset - Orange & Purple</option>
                                @foreach (var customTheme in GetCustomThemes())
                                {
                                    <option value="@customTheme.Key">@customTheme.Value</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <p class="help">Choose a visual theme for your profile page</p>
                </div>
            </div>

            <div class="column is-6">
                <div class="field">
                    <label class="field-label" for="informationUri">Information URI</label>
                    <div class="control">
                        <InputText id="informationUri" @bind-Value="Model!.InformationUri" class="input" placeholder="https://example.com/about" />
                    </div>
                    <ValidationMessage For="@(() => Model.InformationUri)" class="help is-danger" />
                </div>
            </div>

            <div class="column is-12">
                <div class="field">
                    <label class="field-label">Avatar</label>
                    <div class="file-upload">
                        <div class="file-upload-icon">
                            <i class="fas fa-cloud-upload-alt"></i>
                        </div>
                        <p class="has-text-grey">Click to upload or drag and drop</p>
                        <p class="help-text">PNG, JPG up to 2MB</p>
                        <InputFile id="avatar" OnChange="HandleFileSelection" accept="image/*" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="help is-danger">@errorMessage</p>
                    }
                    @if (imagePreview != null)
                    {
                        <img src="@imagePreview" alt="Avatar Preview" class="preview-image" />
                    }
                </div>
            </div>

            @if (string.IsNullOrEmpty(ActorId))
            {
                <div class="column is-12">
                    <div class="field">
                        <div class="control">
                            <button type="button" @onclick="GenerateKeyPair" class="button is-info">
                                <span class="icon">
                                    <i class="fas fa-key"></i>
                                </span>
                                <span>Generate Key Pair</span>
                            </button>
                            <p class="help-text mt-2">Click to automatically generate a public/private key pair for this actor</p>
                        </div>
                    </div>
                </div>

                <div class="column is-6">
                    <div class="field">
                        <label class="field-label" for="public-key">Public Key</label>
                        <div class="control">
                            <InputTextArea id="public-key" @bind-Value="Model.PublicKeyPem" class="textarea" rows="6" placeholder="Paste the public key in PEM format" />
                        </div>
                        <div class="key-label">
                            <i class="fas fa-key"></i>
                            <span>Used for verifying actor signatures</span>
                        </div>
                    </div>
                </div>

                <div class="column is-6">
                    <div class="field">
                        <label class="field-label" for="private-key">Private Key</label>
                        <div class="control">
                            <InputTextArea id="private-key" @bind-Value="Model.PrivateKeyPem" class="textarea" rows="6" placeholder="Paste the private key in PEM format" />
                        </div>
                        <div class="key-label">
                            <i class="fas fa-lock"></i>
                            <span>Used for signing actor activities</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="form-actions">
            <div class="control">
                <button type="submit" class="button is-primary submit-button" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="icon is-small">
                            <i class="fas fa-spinner fa-spin"></i>
                        </span>
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span class="icon">
                            <i class="fas fa-plus"></i>
                        </span>
                         @if (string.IsNullOrEmpty(ActorId))
                        {
                            <span>Create Actor</span>
                        } else {
                            <span>Update Actor</span>
                        }
                    }
                </button>
            </div>
            <div class="control">
                <button type="button" @onclick="ClearForm" class="button is-light">
                    <span class="icon">
                        <i class="fas fa-undo"></i>
                    </span>
                    <span>Clear Form</span>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(ActorId))
{
    <div class="form-section">
        <div class="form-header">
            <h2 class="form-title">Followed Issuers</h2>
        </div>
        @if (FollowedIssuers != null && FollowedIssuers.Any())
        {
            <ul>
                @foreach (var issuer in FollowedIssuers)
                {
                    <li>@issuer.Name - @issuer.Url</li>
                }
            </ul>
        }
        else
        {
            <p>No issuers followed yet.</p>
        }

        <div class="field">
            <label class="label">Issuer URL</label>
            <div class="control">
                <input class="input" @bind="newIssuerUrl" placeholder="https://badgefed-instance-domain.com/@@issuer" />
            </div>
        </div>

        <button type="button" class="button is-primary" @onclick="FollowIssuer">
            Follow
        </button>
        @if (!string.IsNullOrEmpty(issuerValidationMessage))
        {
            <p>@issuerValidationMessage</p>
        }
    </div>
}
  
@code {
    [Parameter]
    public string ActorId { get; set; }

    private Actor? Model = new();
    private IBrowserFile? selectedFile;
    private string? imagePreview;
    private string? errorMessage;
    private bool isSubmitting = false;
    private ElementReference fileInput;
    private List<FollowedIssuer> FollowedIssuers = new();
    private string newIssuerUrl = string.Empty;
    private bool isIssuerValid;
    private string issuerValidationMessage;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(ActorId)) {
            var id = long.Parse(ActorId);
            Model = LocalDbService.GetActorById(id);

            // initialize domain based on request host
        }
        
        if (string.IsNullOrEmpty(Model.Domain))
        {
            Model.Domain = HttpContextAccessor?.HttpContext?.Request?.Host.Value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ActorId))
        {
            var actor = LocalDbService.GetActorById(long.Parse(ActorId));
            if (actor != null)
            {
                FollowedIssuers = LocalDbService.GetFollowedIssuers(actor.Id);
            }
        }
    }

    private void ClearForm() => Model = new();

    private async Task GenerateKeyPair()
    {
        var keyPair = await CryptoService.GenerateKeyPairAsync();
        Model.PublicKeyPem = keyPair.PublicKeyPem;
        Model.PrivateKeyPem = keyPair.PrivateKeyPem;
        StateHasChanged();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        selectedFile = e.File;
        
        if (selectedFile.Size > 2 * 1024 * 1024) // 2MB limit
        {
            errorMessage = "File size exceeds 2MB limit.";
            selectedFile = null;
            return;
        }

        var format = "image/jpeg";
        var resizedImage = await selectedFile.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        
        imagePreview = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            if (selectedFile != null)
            {
                var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
                var path = Path.Combine(Environment.WebRootPath, "uploads", "avatars");
                
                Directory.CreateDirectory(path);
                
                var fullPath = Path.Combine(path, fileName);
                
                using var stream = selectedFile.OpenReadStream(2 * 1024 * 1024);
                using var fileStream = new FileStream(fullPath, FileMode.Create);
                await stream.CopyToAsync(fileStream);
                
                Model.AvatarPath = $"/uploads/avatars/{fileName}";
            }

            Model.OwnerId = CurrentUser.GetGroupId();
            
            LocalDbService.UpsertActor(Model);
            NavigationManager.NavigateTo("/admin/actors");
            
            Model = new();
            selectedFile = null;
            imagePreview = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating actor: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task FollowIssuer()
    {
        try
        {
            var fediverseInfo = await FollowService.FollowIssuer(Model, newIssuerUrl);

            if (fediverseInfo != null)
            {
                isIssuerValid = true;
                issuerValidationMessage = $"Issuer found: {fediverseInfo.Name}";

                if (!string.IsNullOrEmpty(ActorId) && isIssuerValid)
                {
                    var actorId = long.Parse(ActorId);
                    var issuer = new FollowedIssuer
                    {
                        Name = fediverseInfo.Name, 
                        Url = newIssuerUrl,
                        Inbox = fediverseInfo.Inbox,
                        Outbox = fediverseInfo.Outbox,
                        ActorId = actorId,
                        AvatarUri = fediverseInfo.Icon?.Url ?? string.Empty
                    };

                    LocalDbService.UpsertFollowedIssuer(issuer);
                    FollowedIssuers = LocalDbService.GetFollowedIssuers(actorId);

                    newIssuerUrl = string.Empty;
                    issuerValidationMessage = $"Issuer {fediverseInfo.Name} followed!";
                    isIssuerValid = false;
                }
            } else {
                issuerValidationMessage = "⚠️ Could not retrieve the actor information. Check the URL is a valid fediverse actor.";
                return;
            }
        }
        catch (Exception ex)
        {
            issuerValidationMessage = $"⚠️ Could not validate url. {ex.Message}";
            return;
        }
    }

    private Dictionary<string, string> GetCustomThemes()
    {
        var customThemes = new Dictionary<string, string>();
        var themesPath = Path.Combine(Environment.WebRootPath, "css", "themes");
        
        if (Directory.Exists(themesPath))
        {
            var cssFiles = Directory.GetFiles(themesPath, "*.css")
                .Where(f => !Path.GetFileNameWithoutExtension(f).Equals("default", StringComparison.OrdinalIgnoreCase) &&
                           !Path.GetFileNameWithoutExtension(f).Equals("ocean", StringComparison.OrdinalIgnoreCase) &&
                           !Path.GetFileNameWithoutExtension(f).Equals("forest", StringComparison.OrdinalIgnoreCase) &&
                           !Path.GetFileNameWithoutExtension(f).Equals("sunset", StringComparison.OrdinalIgnoreCase));
            
            foreach (var file in cssFiles)
            {
                var fileName = Path.GetFileNameWithoutExtension(file);
                var displayName = fileName.Replace("-", " ").Replace("_", " ");
                // Capitalize first letter of each word
                displayName = string.Join(" ", displayName.Split(' ').Select(word => 
                    char.ToUpper(word[0]) + word.Substring(1).ToLower()));
                customThemes.Add(fileName, $"{displayName} (Custom)");
            }
        }
        
        return customThemes;
    }
}