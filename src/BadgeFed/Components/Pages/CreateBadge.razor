@page "/admin/badges/create"
@page "/admin/badges/edit/{badgeId}"
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@inject LocalScopedDb LocalDbService
@inject IConfiguration Configuration

@inject CurrentUser CurrentUser
@rendermode InteractiveServer

@layout BadgeFed.Components.Layouts.AdminLayout

@attribute [Authorize(Roles = "admin, manager")]

@if (string.IsNullOrEmpty(BadgeId))
{
    <h1>Create New Badge</h1>
} else {
    <h1>Edit Badge @BadgeId - @Model.Title </h1>
}

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="badgeForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="field">
        <label class="label" for="title">Title</label>
        <div class="control">
            <InputText id="name" @bind-Value="Model!.Title" class="input" />
        </div>
        <ValidationMessage For="@(() => Model.Title)" class="help is-danger" />
    </div>

    <div class="field">
        <label class="label" for="description">Description</label>
        <div class="control">
            <InputTextArea id="description" @bind-Value="Model.Description" rows="4" class="textarea" />
        </div>
        <ValidationMessage For="@(() => Model.Description)" class="help is-danger" />
    </div>

    <div class="field">
        <label class="label" for="avatar">Avatar</label>
        <div class="control">
            <div class="file has-name">
                <label class="file-label">
                    <InputFile id="avatar" OnChange="HandleFileSelection" accept="image/*" class="file-input" />
                    <span class="file-cta">
                        <span class="file-icon">
                            <i class="fas fa-upload"></i>
                        </span>
                        <span class="file-label">Choose a fileâ€¦</span>
                    </span>
                    <span class="file-name">@(selectedFile?.Name ?? "No file selected")</span>
                </label>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="help is-danger">@errorMessage</p>
        }
        @if (imagePreview != null)
        {
            <div class="mt-3">
                <img src="@imagePreview" alt="Avatar Preview" style="max-width: 200px; max-height: 200px;" />
            </div>
        }
    </div>

    <div class="field">
        <label class="label" for="imageAltText">Image alt text</label>
        <div class="control">
            <InputTextArea id="imageAltText" @bind-Value="Model.ImageAltText" rows="12" class="textarea" />
        </div>
        <ValidationMessage For="@(() => Model.ImageAltText)" class="help is-danger" />
    </div>

    <div class="field">
        <label class="label" for="earningCriteria">Earning Criteria</label>
        <div class="control">
            <InputTextArea id="earningCriteria" @bind-Value="Model.EarningCriteria" rows="4" class="textarea" />
        </div>
        <ValidationMessage For="@(() => Model.EarningCriteria)" class="help is-danger" />
    </div>

    <div class="field">
        <label class="label" for="hashtags">Hashtags</label>
        <div class="control">
            <InputText 
                id="hashtags" 
                @bind-Value="Model.Hashtags" 
                class="input" 
                placeholder="e.g. #achievement #certification" 
            />
        </div>
        <p class="help is-size-7 mt-1">
            Enter hashtags with a <code>#</code> prefix, separated by spaces.
        </p>
        <p class="help is-size-7 mb-1">
            <strong>Note:</strong> All badges will automatically include 
            <code>#IssuedByBadgeFed</code> and <code>#BadgeDrop</code> to help others filter badge posts.
        </p>
        <p class="help is-danger is-size-7 mt-2">
            <strong>Warning:</strong> Submitting a large batch of badges at once may flood followers' timelines. 
            Please select hashtags carefully to avoid spam-like behavior.
        </p>
    </div>

    
    <div class="field">
        <label class="label" for="issuedBy">Issued By</label>
        <div class="control">
            <div class="select is-fullwidth">
                <InputSelect id="actorId" @bind-Value="Model.IssuedBy">
                    <option value="0">-- Select an issuer --</option>
                    @foreach (var actor in actors)
                    {
                        <option value="@actor.Id">@actor.FullName - @actor.Username @actor.Domain</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>

    <div class="field">
        <label class="label">Badge Type</label>
        <div class="control">
            <div class="select is-fullwidth">
                <InputSelect id="badgeType" @bind-Value="Model.BadgeType">
                    @foreach (var badgeType in Badge.BadgeTypes)
                    {
                        <option value="@badgeType">@badgeType</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>

    <div class="field is-grouped mt-5">
        <div class="control">
            <button type="submit" class="button is-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="icon is-small">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                    <span>Creating...</span>
                }
                else
                {
                    
                    @if (string.IsNullOrEmpty(BadgeId))
                    {
                        <span>Create Badge</span>
                    } else {
                        <span>Update Badge</span>
                    }
                }
            </button>
        </div>
        <div class="control">
            <button @onclick="ClearForm" type="button" class="button is-light">Clear form</button>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public string BadgeId { get; set; }

    private Badge? Model = new();

    private IBrowserFile? selectedFile;
    private string? imagePreview;
    private string? errorMessage;
    private bool isSubmitting = false;

    private List<Actor> actors;

    protected override void OnInitialized()
    {
        FetchActors();

        if (!string.IsNullOrEmpty(BadgeId)) {
            var id = long.Parse(BadgeId);
            Model = LocalDbService.GetBadgeById(id);
        }
    }

    private void FetchActors()
    {
        if (CurrentUser.IsAdmin())
        {
            actors = LocalDbService.GetActors();
        }
        else
        {
            actors = LocalDbService.GetActors($"OwnerId = '{CurrentUser.GetGroupId()}'");
        }
    }

    private void ClearForm() => Model = new();

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        selectedFile = e.File;
        
        if (selectedFile.Size > 2 * 1024 * 1024) // 2MB limit
        {
            errorMessage = "File size exceeds 2MB limit.";
            selectedFile = null;
            return;
        }

        var format = "image/jpeg";
        var resizedImage = await selectedFile.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        
        imagePreview = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            if (selectedFile != null)
            {
                var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
                var path = Path.Combine(Environment.WebRootPath, "uploads", "badges");
                
                // Ensure directory exists
                Directory.CreateDirectory(path);
                
                var fullPath = Path.Combine(path, fileName);
                
                using var stream = selectedFile.OpenReadStream();
                using var fileStream = new FileStream(fullPath, FileMode.Create);
                await stream.CopyToAsync(fileStream);

                ImageService.ModifyImageForPageShare(fullPath);
                
                Model.Image = $"/uploads/badges/{fileName}";
            }

            Console.WriteLine($"Saving badge: {Model.Image}");

            Model.OwnerId = CurrentUser.GetGroupId();

            // TODO: Save actor to database
            LocalDbService.UpsertBadgeDefinition(Model);
            
            // Redirect to actors list or details page
            NavigationManager.NavigateTo("/admin/badges");
            
            // For demo purposes, just reset the form
            Model = new();

            selectedFile = null;
            imagePreview = null;


        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating badge: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
}
