@page "/admin/grants"

@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@inject LocalScopedDb LocalDbService
@inject CurrentUser CurrentUser
@layout BadgeFed.Components.Layouts.AdminLayout
@rendermode InteractiveServer

@attribute [Authorize(Roles = "admin, manager")]
<h1>Manage Badge Grant Records</h1>

<div class="box">
    <div class="columns">
        <div class="column">
            <div class="field">
                <label class="label">Search:</label>
                <div class="control">
                    <input class="input" @bind="searchTerm" placeholder="Search title, recipient, issuer..." />
                </div>
            </div>
        </div>
        <div class="column">
            <div class="field">
                <label class="label">Status:</label>
                <div class="control">
                    <div class="select is-fullwidth">
                        <select @bind="statusFilter">
                            <option value="">All</option>
                            <option value="pending">Pending Acceptance</option>
                            <option value="accepted">Accepted</option>
                            <option value="processed">Processed</option>
                            <option value="external">External</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div class="field">
                <label class="label">Issued By:</label>
                <div class="control">
                    <div class="select is-fullwidth">
                        <select @bind="issuerFilter">
                            <option value="">All</option>
                            @foreach (var actor in actors.Values)
                            {
                                <option value="@actor.Uri">@actor.FullName</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div class="field">
                <label class="label">Date Range:</label>
                <div class="control">
                    <input type="date" class="input" @bind="dateFromFilter" />
                </div>
            </div>
        </div>
        <div class="column">
            <div class="field">
                <label class="label">To:</label>
                <div class="control">
                    <input type="date" class="input" @bind="dateToFilter" />
                </div>
            </div>
        </div>
    </div>
    <div class="columns">
        <div class="column">
            <div class="buttons">
                <button class="button is-primary" @onclick="ApplyFilters">Apply Filters</button>
                <button class="button" @onclick="ClearFilters">Clear Filters</button>
            </div>
        </div>
    </div>
</div>

@if (records == null)
{
    <p>Loading...</p>
}
else
{
    <div class="box">
        <p>Showing @filteredRecords.Count of @records.Count records</p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Badge Title</th>
                <th>Issued To</th>
                <th>Issued By</th>
                <th>Issued On</th>
                <th>Accepted On</th>
                <th>Accept Link</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in filteredRecords)
            {
                var actorName = actors.ContainsKey(record.IssuedBy) 
                    ? actors[record.IssuedBy].FullName 
                    : record.IssuedBy.Substring(record.IssuedBy.LastIndexOf('/') + 1);
                
                <tr class="@GetRowClass(record)">
                    <td>@record.Id</td>
                    <td>@record.Title</td>
                    <td><a href="@record.IssuedToSubjectUri">@(string.IsNullOrEmpty(record.IssuedToName) ? record.IssuedToSubjectUri : record.IssuedToName)</a></td>
                    <td><a href="@record.IssuedBy">@actorName</a></td>
                    <td>@record.IssuedOn.ToString("yyyy-MM-dd")</td>
                    <td>@(record.AcceptedOn?.ToString("yyyy-MM-dd") ?? "-")</td>
                    <td>
                        @if (record.IsExternal) {
                            <a href="@record.NoteId" class="button is-info is-small">View</a>
                        } else if (string.IsNullOrEmpty(record.AcceptKey)) {
                            if (string.IsNullOrEmpty(record.FingerPrint)) {
                                <a href="/admin/grant/@record.Id/process" class="button is-primary is-small">Process</a>
                            } else {
                                <a href="/admin/grant/@record.Id/broadcast" class="button is-light is-small">Broadcast</a>

                                <a href="@record.NoteId" class="button is-info is-small">View</a>

                                <div class="buttons">
                                    <a href="/admin/grant/@record.Id/notify-processed/activitypub" class="button is-light is-small" title="Notify via ActivityPub">
                                        <span class="icon">
                                            <i class="fas fa-broadcast-tower"></i>
                                        </span>
                                        <span>ActivityPub</span>
                                    </a>
                                    <a href="/admin/grant/@record.Id/notify-processed/email" class="button is-light is-small" title="Notify via Email">
                                        <span class="icon">
                                            <i class="fas fa-envelope"></i>
                                        </span>
                                        <span>Email</span>
                                    </a>
                                </div>
                            }
                        } else {
                            <a href="/accept/grant/@record.Id/@record.AcceptKey">Accept link</a>
                            
                            <div class="buttons">
                                <a href="/admin/grant/@record.Id/notify/activitypub" class="button is-light is-small" title="Notify via ActivityPub">
                                    <span class="icon">
                                        <i class="fas fa-broadcast-tower"></i>
                                    </span>
                                    <span>ActivityPub</span>
                                </a>
                                <a href="/admin/grant/@record.Id/notify/email" class="button is-light is-small" title="Notify via Email">
                                    <span class="icon">
                                        <i class="fas fa-envelope"></i>
                                    </span>
                                    <span>Email</span>
                                </a>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BadgeRecord?> records;
    private List<BadgeRecord?> filteredRecords = new List<BadgeRecord?>();

    private Dictionary<string, Actor> actors;

    private string errorMessage;

    // Filter properties
    private string searchTerm = "";
    private string statusFilter = "";
    private string issuerFilter = "";
    private DateTime? dateFromFilter;
    private DateTime? dateToFilter;

    private void PerformSearch() {
        var filter = new LocalDbService.Filter();

        var whereClauses = new List<string>();

        if (!string.IsNullOrEmpty(searchTerm)) {
            whereClauses.Add("(Title LIKE @Term OR IssuedToSubjectUri LIKE @Term OR IssuedBy LIKE @Term)");
            filter.Parameters.Add("Term", $"%{searchTerm}%");
        }

        if (!CurrentUser.IsAdmin()) {
            whereClauses.Add("OwnerId = @UserId");
            filter.Parameters.Add("UserId", CurrentUser.UserId);
        }

        filter.Where = string.Join(" AND ", whereClauses);

        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(filter));
        
        records = LocalDbService.GetBadgeRecords(filter, true)!;
    }

    private void ApplyFilters() {
        PerformSearch();

        if (records == null) return;
        
        filteredRecords = records.Where(r => {
            bool matchesStatus = string.IsNullOrEmpty(statusFilter) || GetRecordStatus(r) == statusFilter;
            bool matchesIssuer = string.IsNullOrEmpty(issuerFilter) || r.IssuedBy == issuerFilter;
            bool matchesDateFrom = !dateFromFilter.HasValue || r.IssuedOn >= dateFromFilter.Value;
            bool matchesDateTo = !dateToFilter.HasValue || r.IssuedOn <= dateToFilter.Value.AddDays(1);
            
            return matchesStatus && matchesIssuer && matchesDateFrom && matchesDateTo;
        }).ToList();
    }

    private void ClearFilters() {
        searchTerm = "";
        statusFilter = "";
        issuerFilter = "";
        dateFromFilter = null;
        dateToFilter = null;
        
        PerformSearch();
        
        filteredRecords = new List<BadgeRecord?>(records);
    }

    private string GetRecordStatus(BadgeRecord record) {
        if (record.IsExternal) {
            return "external";
        } else if (!string.IsNullOrEmpty(record.FingerPrint)) {
            return "processed";
        } else if (record.AcceptedOn.HasValue) {
            return "accepted";
        } else {
            return "pending";
        }
    }

    private string GetRowClass(BadgeRecord record) {
        string status = GetRecordStatus(record);
        return status switch {
            "processed" => "has-background-success-light",
            "accepted" => "has-background-info-light",
            "external" => "has-background-warning-light",
            _ => ""
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var actorList = LocalDbService.GetActors();

        actors = actorList.ToDictionary(a => a.Uri!.ToString());

        PerformSearch();

        filteredRecords = new List<BadgeRecord?>(records);
    }
}
