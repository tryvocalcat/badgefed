@page "/admin/settings/themes"

@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Microsoft.JSInterop

@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@layout BadgeFed.Components.Layouts.AdminLayout

@attribute [Authorize(Roles = "admin")]

<div class="container">
    <nav class="breadcrumb" aria-label="breadcrumbs">
        <ul>
            <li><a href="/admin">Admin</a></li>
            <li><a href="/admin/settings">Settings</a></li>
            <li class="is-active"><a href="#" aria-current="page">Themes</a></li>
        </ul>
    </nav>

    <h1 class="title">Theme Management</h1>
    <p class="subtitle">Manage profile themes for issuers</p>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="notification is-success is-light">
            <button class="delete" @onclick="() => successMessage = string.Empty"></button>
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="notification is-danger is-light">
            <button class="delete" @onclick="() => errorMessage = string.Empty"></button>
            @errorMessage
        </div>
    }

    <!-- Built-in Themes Preview -->
    <div class="box">
        <h2 class="subtitle">
            <span class="icon-text">
                <span class="icon">
                    <i class="fas fa-palette"></i>
                </span>
                <span>Built-in Themes</span>
            </span>
        </h2>
        
        <div class="content">
            <p>These are the default themes available to all users.</p>
        </div>

        <div class="columns is-multiline">
            <div class="column is-6">
                <div class="card">
                    <div class="card-header" style="background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%); color: white;">
                        <p class="card-header-title has-text-white">Default - Modern Gradient</p>
                    </div>
                    <div class="card-content">
                        <p>Clean modern design with indigo gradient header</p>
                    </div>
                </div>
            </div>
            <div class="column is-6">
                <div class="card">
                    <div class="card-header" style="background: linear-gradient(135deg, #0ea5e9 0%, #06b6d4 50%, #14b8a6 100%); color: white;">
                        <p class="card-header-title has-text-white">Ocean - Blue & Teal</p>
                    </div>
                    <div class="card-content">
                        <p>Ocean-inspired theme with blue and teal gradients</p>
                    </div>
                </div>
            </div>
            <div class="column is-6">
                <div class="card">
                    <div class="card-header" style="background: linear-gradient(135deg, #059669 0%, #047857 50%, #065f46 100%); color: white;">
                        <p class="card-header-title has-text-white">Forest - Green & Earth</p>
                    </div>
                    <div class="card-content">
                        <p>Nature-inspired theme with green and earth tones</p>
                    </div>
                </div>
            </div>
            <div class="column is-6">
                <div class="card">
                    <div class="card-header" style="background: linear-gradient(135deg, #f97316 0%, #ea580c 25%, #dc2626 50%, #be123c 75%, #9333ea 100%); color: white;">
                        <p class="card-header-title has-text-white">Sunset - Orange & Purple</p>
                    </div>
                    <div class="card-content">
                        <p>Vibrant sunset theme with warm orange and purple gradients</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="content mt-4">
            <p><strong>Need a starting point?</strong> Download our custom theme template:</p>
            <div class="buttons">
                <button class="button is-info" @onclick="() => DownloadTemplate()">
                    <span class="icon">
                        <i class="fas fa-download"></i>
                    </span>
                    <span>Download Template</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Upload Custom Theme -->
    <div class="box">
        <h2 class="subtitle">
            <span class="icon-text">
                <span class="icon">
                    <i class="fas fa-upload"></i>
                </span>
                <span>Upload Custom Theme</span>
            </span>
        </h2>
        
        <div class="content">
            <p>Upload a custom CSS file to create a new theme. The file must contain CSS rules for styling issuer profiles.</p>
            <p><strong>Required CSS classes:</strong></p>
            <ul>
                <li><code>.issuer-header</code> - Main header section</li>
                <li><code>.issuer-avatar</code> - Profile avatar styling</li>
                <li><code>.stat-card</code> - Statistics cards</li>
                <li><code>.badge-card</code> - Badge display cards</li>
                <li><code>.follower-card</code> - Follower cards</li>
                <li><code>.social-link</code> - Social media links</li>
            </ul>
        </div>

        <div class="field">
            <label class="label">Theme Name</label>
            <div class="control">
                <input @bind="themeName" class="input" type="text" placeholder="Enter theme name (e.g., corporate, dark, minimal)" />
            </div>
            @if (!string.IsNullOrEmpty(themeNameError))
            {
                <p class="help is-danger">@themeNameError</p>
            }
        </div>

        <div class="field">
            <label class="label">Choose CSS File</label>
            <div class="control">
                <div class="file has-name">
                    <label class="file-label">
                        <InputFile OnChange="OnThemeFileSelected" accept=".css" class="file-input" />
                        <span class="file-cta">
                            <span class="file-icon">
                                <i class="fas fa-upload"></i>
                            </span>
                            <span class="file-label">Choose CSS fileâ€¦</span>
                        </span>
                        <span class="file-name">@(selectedThemeFile?.Name ?? "No file selected")</span>
                    </label>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(themeUploadError))
            {
                <p class="help is-danger">@themeUploadError</p>
            }
        </div>

        <div class="field">
            <div class="control">
                <button class="button is-success" @onclick="UploadTheme" disabled="@(selectedThemeFile == null || string.IsNullOrWhiteSpace(themeName))">
                    <span class="icon">
                        <i class="fas fa-check"></i>
                    </span>
                    <span>Upload Theme</span>
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(themeUploadMessage))
        {
            <div class="notification is-success is-light">
                @themeUploadMessage
            </div>
        }
    </div>

    <!-- Manage Custom Themes -->
    <div class="box">
        <h2 class="subtitle">
            <span class="icon-text">
                <span class="icon">
                    <i class="fas fa-cogs"></i>
                </span>
                <span>Custom Themes</span>
            </span>
        </h2>
        
        <div class="content">
            <p>Manage uploaded custom themes.</p>
        </div>

        @if (customThemes.Any())
        {
            <div class="table-container">
                <table class="table is-fullwidth is-striped">
                    <thead>
                        <tr>
                            <th>Theme Name</th>
                            <th>File Size</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var theme in customThemes)
                        {
                            <tr>
                                <td><strong>@theme.Name</strong></td>
                                <td>@FormatFileSize(theme.Size)</td>
                                <td>@theme.Created.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <div class="buttons">
                                        <button class="button is-small is-info" @onclick="() => PreviewTheme(theme.Name)">
                                            <span class="icon is-small">
                                                <i class="fas fa-eye"></i>
                                            </span>
                                            <span>Preview</span>
                                        </button>
                                        <button class="button is-small is-success" @onclick="() => DownloadTheme(theme.Name)">
                                            <span class="icon is-small">
                                                <i class="fas fa-download"></i>
                                            </span>
                                            <span>Download</span>
                                        </button>
                                        <button class="button is-small is-danger" @onclick="() => DeleteTheme(theme.Name)">
                                            <span class="icon is-small">
                                                <i class="fas fa-trash"></i>
                                            </span>
                                            <span>Delete</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="notification is-info is-light">
                <p>No custom themes uploaded yet.</p>
            </div>
        }
    </div>
</div>

@code {
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private IBrowserFile? selectedThemeFile;
    private string themeName = string.Empty;
    private string? themeUploadMessage;
    private string? themeUploadError;
    private string? themeNameError;
    
    private List<ThemeInfo> customThemes = new();

    public class ThemeInfo
    {
        public string Name { get; set; } = string.Empty;
        public long Size { get; set; }
        public DateTime Created { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomThemes();
    }

    private async Task LoadCustomThemes()
    {
        customThemes.Clear();
        var themesPath = Path.Combine(Environment.WebRootPath, "css", "themes");
        
        if (Directory.Exists(themesPath))
        {
            var builtInThemes = new[] { "default", "ocean", "forest", "sunset" };
            var cssFiles = Directory.GetFiles(themesPath, "*.css")
                .Where(f => !builtInThemes.Contains(Path.GetFileNameWithoutExtension(f), StringComparer.OrdinalIgnoreCase));
            
            foreach (var file in cssFiles)
            {
                var fileInfo = new FileInfo(file);
                customThemes.Add(new ThemeInfo
                {
                    Name = Path.GetFileNameWithoutExtension(file),
                    Size = fileInfo.Length,
                    Created = fileInfo.CreationTime
                });
            }
        }
        
        customThemes = customThemes.OrderBy(t => t.Name).ToList();
    }

    private void OnThemeFileSelected(InputFileChangeEventArgs e)
    {
        selectedThemeFile = e.File;
        themeUploadError = string.Empty;
        themeUploadMessage = string.Empty;
        
        if (selectedThemeFile != null)
        {
            if (!selectedThemeFile.Name.EndsWith(".css", StringComparison.OrdinalIgnoreCase))
            {
                themeUploadError = "Please select a CSS file.";
                selectedThemeFile = null;
            }
            else if (selectedThemeFile.Size > 1024 * 1024) // 1MB limit
            {
                themeUploadError = "File size must be less than 1MB.";
                selectedThemeFile = null;
            }
        }
    }

    private async Task UploadTheme()
    {
        if (selectedThemeFile == null || string.IsNullOrWhiteSpace(themeName))
            return;

        try
        {
            themeNameError = string.Empty;
            themeUploadError = string.Empty;
            
            // Validate theme name
            if (!IsValidThemeName(themeName))
            {
                themeNameError = "Theme name can only contain letters, numbers, hyphens, and underscores.";
                return;
            }

            var sanitizedName = themeName.ToLowerInvariant().Trim();
            var builtInThemes = new[] { "default", "ocean", "forest", "sunset" };
            
            if (builtInThemes.Contains(sanitizedName))
            {
                themeNameError = "Cannot use built-in theme names.";
                return;
            }

            var themesPath = Path.Combine(Environment.WebRootPath, "css", "themes");
            Directory.CreateDirectory(themesPath);

            var fileName = $"{sanitizedName}.css";
            var filePath = Path.Combine(themesPath, fileName);

            using var stream = selectedThemeFile.OpenReadStream(1024 * 1024); // 1MB max
            using var fileStream = new FileStream(filePath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            themeUploadMessage = $"Theme '{themeName}' uploaded successfully!";
            
            // Reset form
            selectedThemeFile = null;
            themeName = string.Empty;
            
            await LoadCustomThemes();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            themeUploadError = $"Error uploading theme: {ex.Message}";
        }
    }

    private bool IsValidThemeName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return false;
            
        return name.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_') && 
               name.Length >= 2 && name.Length <= 50;
    }

    private async Task DeleteTheme(string themeName)
    {
        try
        {
            var themesPath = Path.Combine(Environment.WebRootPath, "css", "themes");
            var filePath = Path.Combine(themesPath, $"{themeName}.css");
            
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
                successMessage = $"Theme '{themeName}' deleted successfully.";
                await LoadCustomThemes();
                StateHasChanged();
            }
            else
            {
                errorMessage = $"Theme file '{themeName}' not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting theme: {ex.Message}";
        }
    }

    private void PreviewTheme(string themeName)
    {
        // For now, just show a message. In a real implementation, you might open a modal with a preview
        successMessage = $"Preview for '{themeName}' - visit an issuer profile to see the theme in action.";
    }

    private async Task DownloadTheme(string themeName)
    {
        try
        {
            var response = await HttpClient.GetAsync($"/api/ThemeDownload/{themeName}");
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"{themeName}.css";
                
                // Use JavaScript to trigger download
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes), "text/css");
                successMessage = $"Theme '{themeName}' downloaded successfully.";
            }
            else
            {
                errorMessage = $"Error downloading theme: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading theme: {ex.Message}";
        }
    }

    private async Task DownloadTemplate()
    {
        await DownloadTheme("custom-template");
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }
}

<script>
    window.downloadFile = (fileName, base64Data, contentType) => {
        const linkSource = `data:${contentType};base64,${base64Data}`;
        const downloadLink = document.createElement("a");
        downloadLink.href = linkSource;
        downloadLink.download = fileName;
        downloadLink.click();
    };
</script>
