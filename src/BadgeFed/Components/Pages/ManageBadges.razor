@page "/admin/badges"

@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@inject LocalScopedDb LocalDbService
@inject CurrentUser CurrentUser
@layout BadgeFed.Components.Layouts.AdminLayout
@rendermode InteractiveServer

@attribute [Authorize(Roles = "admin, manager")]

    <h1 class="title">Manage Badges</h1>

    <div class="mb-4 has-text-right">
        <a href="/admin/badges/create" class="button is-success">Create New Badge</a>
    </div>

    @if (badges == null)
    {
        <div class="notification is-info">Loading...</div>
    }
    else
    {
        <div class="table-container">
            <table class="table is-fullwidth is-striped is-hoverable">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Title</th>
                        <th>Issued By</th>
                        <th>Image</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var badge in badges)
                    {
                        //var actor = actors != null && actors.ContainsKey(badge.IssuedBy) ? actors[badge.IssuedBy].FullName : badge.IssuedBy.ToString();
                        var actor = badge.Issuer?.FullName ?? badge.IssuedBy.ToString();
                        <tr>
                            <td>@badge.Id</td>
                            <td>@badge.Title</td>
                            <td><a href="#">@actor</a></td>
                            <td>
                                <figure class="image is-64x64">
                                    <img src="@badge.Image" alt="@badge.ImageAltText">
                                </figure>
                            </td>                            
                            <td>
                                <div class="buttons">
                                    <button class="button is-primary" @onclick="() => GrantBadge(badge)">Grant</button>
                                    <button class="button is-info" @onclick="() => BulkGrantBadge(badge)">Bulk Grant</button>
                                    <button class="button is-link" @onclick="() => PreviewBadge(badge)">View</button>
                                    <button class="button is-secondary" @onclick="() => EditBadge(badge)">Edit</button>
                                    <button class="button is-danger" @onclick="() => DeleteBadge(badge)">Delete</button>

                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

@code {
    private List<Badge> badges;

    private Dictionary<long, Actor> actors;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        FetchBadges();
    }

    private void FetchBadges()
    {
        string? filter = null;

        if (!CurrentUser.IsAdmin())
        {
            filter = $"a.OwnerId = '{CurrentUser.GetGroupId()}'";
        }

        badges = LocalDbService.GetAllBadgeDefinitions(true, filter);
    }    private void GrantBadge(Badge badge)
    {
        NavigationManager.NavigateTo($"/admin/grant/{badge.Id}");
    }

    private void BulkGrantBadge(Badge badge)
    {
        NavigationManager.NavigateTo($"/admin/bulk-grant/{badge.Id}");
    }

    private void PreviewBadge(Badge badge)
    {
        NavigationManager.NavigateTo($"/admin/preview/badge/{badge.Id}", forceLoad: true);
    }

    private void EditBadge(Badge badge)
    {
        NavigationManager.NavigateTo($"/admin/badges/edit/{badge.Id}");
    }

    private void DeleteBadge(Badge badge)
    {
        LocalDbService.DeleteBadgeDefinition(badge.Id);
       
        FetchBadges();
    }
    
}
