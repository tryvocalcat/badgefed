@page "/accept/grant/{id}/{key}"
@using ActivityPubDotNet.Core
@using System.Text.Json
@inject NavigationManager NavManager
@inject LocalScopedDb DbService
@using BadgeFed.Models
@inject HttpClient HttpClient
@rendermode InteractiveServer

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="has-text-centered">
        <p>@errorMessage</p>
    </div>
}
else if (accepted)
{
    <div class="notification is-success has-text-centered mb-5">
        <h4 class="title is-3 has-text-weight-bold">
            <span class="icon has-text-white">
            <i class="oi oi-check"></i>
            </span> 
            Badge Accepted! Processing...
        </h4>
        <p class="subtitle is-5 has-text-white">
            Your badge has been successfully accepted and added to your collection.
            It will be published to the decentralized network shortly, and you'll receive a confirmation when completed.
            <strong>Feel free to refresh this page in a few moments to see the badge in your collection.</strong>
        </p>
    </div>
} else {
<div class="notification is-link has-text-centered mb-5">
    <h4 class="title is-3 has-text-weight-bold">
        <span class="icon has-text-white">
            <i class="oi oi-star"></i>
        </span> 
        Congratulations!
    </h4>
    <p class="subtitle is-5 has-text-white">You've earned this @Badge.BadgeType. Accept it to add it to your collection.</p>
</div>
<div class="card" style="max-width: 600px; margin: 0 auto; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); border-radius: 8px;">
    <div class="card-header has-text-centered" style="background-color: #f7f7f7; border-bottom: 1px solid #ddd;">
        <div class="card-header-title is-centered">
            <img src="@BadgeRecord.Image" alt="@BadgeRecord.ImageAltText" class="image is-128x128" style="border-radius: 8px;"/>
        </div>
    </div>
    <div class="card-content">
        <h4 class="title is-4 has-text-centered has-text-weight-semibold">@BadgeRecord.Title</h4>
        <div class="content">
            <p class="mb-2"><strong>Issued By:</strong> <a href="@Actor.Uri" class="has-text-link">@Actor.FullName</a></p>
            <p class="mb-2"><strong>Description:</strong> @BadgeRecord.Description</p>
            <p class="mb-2"><strong>Earning Criteria:</strong> @BadgeRecord.EarningCriteria</p>
            <p class="mb-2"><strong>Issued On:</strong> @BadgeRecord.IssuedOn.ToShortDateString()</p>
        </div>
    </div>
 <div class="card-content">
    <!-- Form Section -->
    <form @onsubmit="HandleValidSubmit" method="post">
        <div class="notification is-warning mb-4">
            <p><strong>Note:</strong> The following information will be permanently associated with this badge once accepted. Please ensure all details are correct.</p>
        </div>

        @if (!emailValidated)
        {
            <!-- Email Input -->
            <div class="field mb-3">
                <label class="label" for="email">Confirm Email Address:</label>
                <div class="control">
                    <input type="email" id="email" class="input is-rounded" @bind="acceptEmail" 
                    required placeholder="@BadgeRecord.IssuedToEmail"/>
                </div>
                <p class="help is-info">
                    Please enter the email address this badge was originally sent to for verification.
                </p>
            </div>
            <div class="control mt-2">
                <button class="button is-outlined is-primary is-rounded" @onclick="ValidateEmail" type="button">Validate</button>
            </div>

            @if (invalidEmail)
            {
                <div class="notification is-danger mt-3 mb-3">
                    <p><span class="icon"><i class="oi oi-warning"></i></span> 
                        The email address you entered does not match our records. 
                        Please try again with the email address this badge was sent to.
                        If you believe this is an error or you don't know the email address, please contact the issuer.
                    </p>
                </div>
            }
        }
        else 
        {
            <!-- Profile URI Input -->
            <div class="field mb-3">
                <label class="label" for="profileUri">Profile URI:</label>
                <div class="control">
                    <input type="url" id="profileUri" class="input is-rounded" @bind="Model.ProfileUri" placeholder="e.g., https://mastodon.social/@@username" />
                </div>
                <p class="help is-info">
                    Enter your profile URL (e.g., https://mastodon.social/@@username, https://linkedin/in/username).
                </p>
                <div class="control mt-2">
                    <button class="button is-outlined is-primary is-rounded" @onclick="ValidateProfileUrl" type="button">Validate</button>
                </div>
                <p class="help is-info">
                    @ValidationProfileMessage
                </p>
            </div>

            <!-- Full Name Input -->
            <div class="field mb-3">
                <label class="label" for="fullName">Full Name:</label>
                <div class="control">
                    <input type="text" id="fullName" class="input is-rounded" @bind="Model.Name" required placeholder="Enter your full name"/>
                </div>
            </div>

            <!-- Certification Checkbox -->
            <div class="field mt-4 mb-3">
                <div class="control">
                    <label class="checkbox">
                        <input type="checkbox" id="certifyCheck" @bind="certificationCompleted" />
                        By checking this box I certify I completed the earning criteria.
                    </label>
                </div>
            </div>

            <!-- Visibility Select -->
            <div class="field mb-3">
                <label class="label" for="visibility">Visibility:</label>
                <div class="control">
                    <div class="select is-rounded is-fullwidth">
                        <select id="visibility" @bind="visibility">
                            <option value="Public">Public</option>
                            <option value="Unlisted">Unlisted</option>
                        </select>
                    </div>
                </div>
                <p class="help is-info">
                    Choose the visibility of this badge on the network.
                    Unlisted badges are not searchable, but anyone with the direct link can view them.
                </p>
            </div>

            <!-- Submit Button -->
            <div class="field">
                <div class="control">
                    <button type="submit" class="button is-primary is-fullwidth is-medium is-rounded">Accept Badge</button>
                </div>
            </div>
        }
    </form></div>
</div>

}

@code 
{
    [Parameter] public string Id { get; set; }
    [Parameter] public string Key { get; set; }

    public Recipient? Model = new();

    public BadgeRecord BadgeRecord;

    private bool certificationCompleted;

    private string visibility = "Public";

    public Badge Badge;

    public Actor Actor;

    public bool accepted = false;

    private string acceptEmail;

    public string ValidationProfileMessage { get; set; }

    private bool emailValidated = false;

    private bool invalidEmail = false;

    private string errorMessage = string.Empty;

    public async Task ValidateEmail()
    {
        emailValidated = acceptEmail == BadgeRecord.IssuedToEmail;
        invalidEmail = !emailValidated;
    }

    public async Task ValidateProfileUrl()
    {
        ValidationProfileMessage = "Checking ...";

        if (string.IsNullOrWhiteSpace(Model.ProfileUri))
        {
            ValidationProfileMessage = "Profile URI is required.";
            return;
        }

        // check if it starts as https://
        if (!Model.ProfileUri.StartsWith("https://"))
        {
            ValidationProfileMessage = "Profile URI must start with https://";
            return;
        }

        // check if it is a valid URL
        if (!Uri.TryCreate(Model.ProfileUri, UriKind.Absolute, out _))
        {
            ValidationProfileMessage = "Invalid URL.";
            return;
        }

        try
        {
            ValidationProfileMessage = "✓ Valid URL";

            var actorHelper = new ActorHelper(Actor.PrivateKeyPem, Actor.KeyId);
            
            var fediverseInfo = await actorHelper.FetchActorInformationAsync(Model.ProfileUri);

            if (fediverseInfo != null)
            {
                Model.IsActivityPubActor = true;
                
                ValidationProfileMessage += "✓ ActivityPub endpoint.";
                
                if (!string.IsNullOrEmpty(fediverseInfo.Name))
                {
                    Model.Name = fediverseInfo.Name;
                    ValidationProfileMessage += " ✓ Name autofilled from profile.";
                } else if (!string.IsNullOrEmpty(fediverseInfo.PreferredUsername))
                {
                    Model.Name = fediverseInfo.PreferredUsername;
                    ValidationProfileMessage += " ✓ Name autofilled from profile.";
                }
            } else {
                // ValidationProfileMessage += "⚠️ Could not retrieve the actor information. Your badge can still be issued, but the actor may not be federated.";
                Model.IsActivityPubActor = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error validating profile URL: {ex.Message}");
            // ValidationProfileMessage += $"⚠️ Could not validate url. Your badge can still be issued, but the actor won't be federated.";
        }
    }

    public async Task HandleValidSubmit()
    {
        if (!certificationCompleted)
        {
            return;
        }

        DbService.UpsertRecipient(Model);

        var issuedTo = Model.ProfileUri; //Model.IsActivityPubActor ? : $"https://{Actor.Domain}/recipients/{Actor.Domain}/{Model.Id}";

        BadgeRecord.IssuedToName = Model.Name;
        BadgeRecord.IssuedToSubjectUri = issuedTo;
        BadgeRecord.IssuedToEmail = string.Empty;
        BadgeRecord.Visibility = visibility;

        DbService.AcceptBadgeRecord(BadgeRecord);

        accepted = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var id = long.Parse(Id);
        var record = DbService.GetBadgeToAccept(id);

        if (record == null)
        {
            errorMessage = "Badge record not found or was already accepted.";
            return;
        }

        if (!string.IsNullOrEmpty(record?.AcceptKey) && record?.AcceptKey != Key)
        {
            errorMessage = "Badge record not found or invalid verification key. Please check that you've used the complete link from your email. If you continue to have trouble, contact the badge issuer.";
            return;
        }

        if (string.IsNullOrEmpty(record?.AcceptKey) && string.IsNullOrEmpty(record?.NoteId))
        {
            errorMessage = "Your badge is on an adventure! It's currently being signed, federated, and prepared for your collection. Please check back in a few moments while our digital elves do their magic!";
            return;
        }

        if (!string.IsNullOrEmpty(record?.NoteId))
        {
            NavManager.NavigateTo(record.NoteId);

            return;
        }

        Model = DbService.GetRecipientByIssuedTo(record);
        
        Badge = DbService.GetBadgeDefinitionById(record.Badge.Id);

        Actor = DbService.GetActorById(Badge.IssuedBy);

        BadgeRecord = record;

        emailValidated = string.IsNullOrEmpty(BadgeRecord.IssuedToEmail);
    }
}