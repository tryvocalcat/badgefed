@page "/admin/settings/general"

@using BadgeFed.Models

@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject LocalScopedDb LocalDbService
@rendermode InteractiveServer

@layout BadgeFed.Components.Layouts.AdminLayout

@attribute [Authorize(Roles = "admin")]

<div class="container">
    <nav class="breadcrumb" aria-label="breadcrumbs">
        <ul>
            <li><a href="/admin">Dashboard</a></li>
            <li><a href="/admin/settings">Settings</a></li>
            <li class="is-active"><a href="#" aria-current="page">General</a></li>
        </ul>
    </nav>

    <h1 class="title">General Settings</h1>
    <p class="subtitle">Customize your application appearance and behavior</p>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="notification is-success">
            <button class="delete" @onclick="() => successMessage = string.Empty"></button>
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="notification is-danger">
            <button class="delete" @onclick="() => errorMessage = string.Empty"></button>
            @errorMessage
        </div>
    }

    <!-- Custom Logo -->
    <div class="box">
        <h2 class="subtitle">
            <span class="icon-text">
                <span class="icon">
                    <i class="fas fa-image"></i>
                </span>
                <span>Custom Logo</span>
            </span>
        </h2>
        
        <div class="content">
            <p>Upload a custom logo to replace the default. <strong>File must be PNG</strong> and will be saved as <code>logo.h.png</code>.</p>
        </div>        <div class="field">
            <label class="label">Choose Logo File</label>
            <div class="control">
                <div class="file has-name">
                    <label class="file-label">
                        <InputFile OnChange="OnLogoFileSelected" accept=".png" class="file-input" />
                        <span class="file-cta">
                            <span class="file-icon">
                                <i class="fas fa-upload"></i>
                            </span>
                            <span class="file-label">Choose PNG fileâ€¦</span>
                        </span>
                        <span class="file-name">@(SelectedLogoFile?.Name ?? "No file selected")</span>
                    </label>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(LogoUploadError))
            {
                <p class="help is-danger">@LogoUploadError</p>
            }
        </div>

        <div class="field">
            <div class="control">
                <button class="button is-success" @onclick="UploadLogo" disabled="@(SelectedLogoFile == null)">
                    <span class="icon">
                        <i class="fas fa-check"></i>
                    </span>
                    <span>Upload Logo</span>
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(LogoUploadMessage))
        {
            <div class="notification is-success is-light">
                @LogoUploadMessage
            </div>
        }
    </div>

    <!-- Custom CSS -->
    <div class="box">
        <h2 class="subtitle">
            <span class="icon-text">
                <span class="icon">
                    <i class="fas fa-palette"></i>
                </span>
                <span>Custom CSS</span>
            </span>
        </h2>
        
        <div class="content">
            <p>Edit custom CSS directly to override styles. Changes will be saved as <code>custom.css</code> in <code>wwwroot/css/</code>.</p>
        </div>

        <div class="field">
            <label class="label">CSS Content</label>
            <div class="control">
                <textarea @bind="CustomCssContent" class="textarea" rows="12" placeholder="Enter your custom CSS here..."></textarea>
            </div>
        </div>

        <div class="field is-grouped">
            <div class="control">
                <button class="button is-success" @onclick="SaveCss">
                    <span class="icon">
                        <i class="fas fa-save"></i>
                    </span>
                    <span>Save CSS</span>
                </button>
            </div>
            <div class="control">
                <button class="button is-info" @onclick="ReloadCss">
                    <span class="icon">
                        <i class="fas fa-sync-alt"></i>
                    </span>
                    <span>Reload CSS</span>
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(CssMessage))
        {
            <div class="notification is-success is-light">
                @CssMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(CssError))
        {
            <div class="notification is-danger is-light">
                <strong>Error:</strong> @CssError
            </div>
        }
    </div>
</div>

@code {
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private IBrowserFile? SelectedLogoFile { get; set; }
    private string? LogoUploadMessage { get; set; }
    private string? LogoUploadError { get; set; }

    private string CustomCssContent { get; set; } = string.Empty;
    private string CssMessage { get; set; } = string.Empty;
    private string CssError { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomCss();
    }    private void OnLogoFileSelected(InputFileChangeEventArgs e)
    {
        LogoUploadMessage = null;
        LogoUploadError = null;
        var file = e.File;
        if (file != null)
        {
            if (Path.GetExtension(file.Name).ToLower() != ".png")
            {
                LogoUploadError = "Only PNG files are allowed.";
                SelectedLogoFile = null;
            }
            else
            {
                SelectedLogoFile = file;
            }
        }
    }

    private async Task UploadLogo()
    {
        LogoUploadMessage = null;
        LogoUploadError = null;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        if (SelectedLogoFile == null)
        {
            LogoUploadError = "No file selected.";
            return;
        }
        if (Path.GetExtension(SelectedLogoFile.Name).ToLower() != ".png")
        {
            LogoUploadError = "Only PNG files are allowed.";
            return;
        }
        try
        {
            var logoPath = Path.Combine(Environment.WebRootPath, "logo.h.png");
            using (var stream = SelectedLogoFile.OpenReadStream(5 * 1024 * 1024)) // 5MB max
            using (var fs = File.Create(logoPath))
            {
                await stream.CopyToAsync(fs);
            }
            LogoUploadMessage = "Logo uploaded successfully!";
            successMessage = "Logo has been updated. Refresh the page to see changes.";
        }
        catch (Exception ex)
        {
            LogoUploadError = $"Error uploading logo: {ex.Message}";
            errorMessage = $"Failed to upload logo: {ex.Message}";
        }
        SelectedLogoFile = null;
    }

    private async Task LoadCustomCss()
    {
        CssMessage = string.Empty;
        CssError = string.Empty;
        try
        {
            var cssPath = Path.Combine(Environment.WebRootPath, "css", "custom.css");
            if (File.Exists(cssPath))
            {
                CustomCssContent = await File.ReadAllTextAsync(cssPath);
            }
            else
            {
                CustomCssContent = "/* Add your custom CSS styles here */";
            }
        }
        catch (Exception ex)
        {
            CssError = $"Error loading CSS: {ex.Message}";
            errorMessage = $"Failed to load custom CSS: {ex.Message}";
        }
    }

    private async Task SaveCss()
    {
        CssMessage = string.Empty;
        CssError = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        try
        {
            var cssFolder = Path.Combine(Environment.WebRootPath, "css");
            Directory.CreateDirectory(cssFolder); // Ensure directory exists
            var cssPath = Path.Combine(cssFolder, "custom.css");
            await File.WriteAllTextAsync(cssPath, CustomCssContent);
            CssMessage = "CSS saved successfully!";
            successMessage = "Custom CSS has been saved successfully.";
        }
        catch (Exception ex)
        {
            CssError = $"Error saving CSS: {ex.Message}";
            errorMessage = $"Failed to save CSS: {ex.Message}";
        }
    }

    private async Task ReloadCss()
    {
        await LoadCustomCss();
        if (string.IsNullOrEmpty(CssError))
        {
            successMessage = "CSS content reloaded from file.";
        }
    }
}