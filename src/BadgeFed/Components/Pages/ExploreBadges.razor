@page "/explore"
@using BadgeFed.Models
@inject LocalScopedDb LocalDbService

<style>
    .badge-card {
        border-radius: 12px;
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    .badge-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .badge-image {
        width: 100%;
        height: 200px;
        object-fit: contain;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 12px 12px 0 0;
    }
    .badge-content {
        padding: 1.5rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    .badge-type {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(0,0,0,0.7);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
    }
    .search-box {
        border-radius: 50px;
        padding: 1rem 1.5rem;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    .search-box:focus {
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }
    .filter-tag {
        cursor: pointer;
        transition: all 0.2s ease;
    }
    .filter-tag:hover {
        transform: scale(1.05);
    }
    .filter-tag.active {
        background: #4f46e5;
        color: white;
    }
    .issuer-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: auto;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }
    .issuer-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: #f8f9fa;
        border-radius: 12px;
    }
    .empty-state-icon {
        font-size: 4rem;
        color: #adb5bd;
        margin-bottom: 1rem;
    }
</style>

<div class="section">
    <div class="container">
        <div class="columns is-vcentered mb-6">
            <div class="column">
                <h1 class="title is-2">Explore Badges</h1>
                <p class="subtitle is-5">Discover and celebrate achievements across our community</p>
            </div>
            <div class="column is-5" style="display: none;">
                <div class="field">
                    <div class="control has-icons-left">
                        <input class="input search-box" type="text" placeholder="Search badges..." @bind="searchQuery" @bind:event="oninput">
                        <span class="icon is-left">
                            <i class="fas fa-search"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="mb-5" >
            <div class="tags">
                <span class="tag filter-tag @(selectedType == null ? "active" : "")" @onclick="() => FilterByType(null)">
                    All
                </span>
                @foreach (var type in Badge.BadgeTypes)
                {
                    <span class="tag filter-tag @(selectedType == type ? "active" : "")" @onclick="() => FilterByType(type)">
                        @type
                    </span>
                }
            </div>
        </div>

        @if (filteredBadges == null)
        {
            <div class="has-text-centered">
                <div class="loader is-loading"></div>
                <p>Loading badges...</p>
            </div>
        }
        else if (!filteredBadges.Any())
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-award"></i>
                </div>
                <h3 class="title is-4">No badges found</h3>
                <p class="subtitle is-6">Try adjusting your search or filters</p>
            </div>
        }
        else
        {
            <div class="columns is-multiline">
                @foreach (var badge in filteredBadges)
                {
                    <div class="column is-4">
                        <div class="badge-card box">
                            <span class="badge-type">@badge.BadgeType</span>
                            <img src="@badge.Image" alt="@badge.ImageAltText" class="badge-image">
                            <div class="badge-content">
                                <h3 class="title is-4 mb-2" style="padding-bottom: 1em;">@badge.Title</h3>
                                <p class="subtitle is-6 mb-3">@badge.Description</p>
                                
                                <div class="level is-mobile mb-3">
                                    <div class="level-left">
                                        <span class="has-tooltip-arrow" data-tooltip="@badge.EarningCriteria">Earning Criteria</span>
                                    </div>
                                    <div class="level-right">
                                        <a href="/view/badge/@badge.Id/grants" class="button is-small is-outlined is-primary">
                                            <span class="icon is-small">
                                                <i class="fas fa-users"></i>
                                            </span>
                                            <span>Recipients</span>
                                        </a>
                                    </div>
                                </div>

                                @{
                                    var issuer = badge.Issuer;

                                    if (issuer != null && issuer.Uri != null)
                                    {
                                        issuer = LocalDbService.GetActorByFilter($"Uri = '{issuer.Uri}'");
                                    }
                                }
                                @if (issuer != null)
                                {
                                    <div class="issuer-info">
                                        @if (!string.IsNullOrEmpty(issuer.AvatarPath))
                                        {
                                            <img src="@issuer.AvatarPath" alt="@issuer.FullName" class="issuer-avatar">
                                        }
                                        else
                                        {
                                            <div class="issuer-avatar has-background-grey-lighter">
                                                <span class="icon"><i class="fas fa-user"></i></span>
                                            </div>
                                        }
                                        <div>
                                            <p class="is-size-7 has-text-weight-medium">Issued by</p>
                                            <a href="/view/actor/@issuer.Domain/@issuer.Username" class="is-size-6 has-text-primary">
                                                @issuer.FullName
                                            </a>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>


<div class="section">
    <div class="container">
        <div class="columns is-vcentered mb-6">
            <div class="column">
                <h1 class="title is-2">Other Issuers</h1>
                <p class="subtitle is-5">Discover other badge issuers in the BadgeFed network.</p>
            </div>
        </div>

        @if (otherIssuers == null)
        {
            <div class="has-text-centered">
                <div class="loader is-loading"></div>
                <p>Loading issuers...</p>
            </div>
        }
        else if (!otherIssuers.Any())
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-award"></i>
                </div>
                <h3 class="title is-4">No other issuers found</h3>
                <p class="subtitle is-6">There are no other issuers in the database, or the instance is not federated.</p>
            </div>
        }
        else
        {
            <div class="columns is-multiline">
                @foreach (var item in otherIssuers)
                {
                    <div class="column is-4">
                        <div class="badge-card box">
                            <div class="badge-content">
                                <h3 class="title is-4 mb-2" style="padding-bottom: 1em;"><a href="@item.Url">@item.Name</a></h3>
                                <p class="subtitle is-6 mb-3">@(new Uri(item.Url).Host)</p>
                                <p class="is-size-7">Total Badges Received: <span class="has-text-weight-bold">@item.TotalIssued</span></p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Badge>? badges;
    private List<Badge>? filteredBadges;
    private List<FollowedIssuer>? otherIssuers = null;
    private string? searchQuery;
    private string? selectedType;

    protected override void OnInitialized()
    {
        badges = LocalDbService.GetAllBadgeDefinitions(true, "a.Featured = TRUE");
        filteredBadges = badges;
        otherIssuers = LocalDbService.GetAllFollowedIssuers(true);
    }

    private void FilterByType(string? type)
    {
        selectedType = type;
        UpdateFilteredBadges();
    }

    private void UpdateFilteredBadges()
    {
        if (badges == null) return;

        var query = badges.AsQueryable();

        if (!string.IsNullOrEmpty(searchQuery))
        {
            query = query.Where(b => 
                b.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                b.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                b.EarningCriteria.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            );
        }

        if (!string.IsNullOrEmpty(selectedType))
        {
            query = query.Where(b => b.BadgeType == selectedType);
        }

        filteredBadges = query.ToList();
    }
}
