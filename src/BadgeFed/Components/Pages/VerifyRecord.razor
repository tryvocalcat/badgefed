@page "/view/grant/{noteIdParam}"
@using ActivityPubDotNet.Core
@using System.Text.Json

@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavManager
@inject LocalScopedDb DbService
@layout BadgeFed.Components.Layouts.MinimalLayout
@inject IJSRuntime JSRuntime

<HeadContent>
  <meta name="author" content="@badgeRecord!.IssuedBy" />
  <meta name="description" content="@badgeRecord.Title was issued by @actorName to @badgeRecord.IssuedToName" />
  <meta property="og:type" content="article" />
  <meta property="og:title" content="@badgeRecord.Title was issued by @actorName to @badgeRecord.IssuedToName" />
  <meta property="og:description" content="@badgeRecord.Description" />
  <meta property="og:url" content="@NavManager.Uri" />
  <meta property="og:image" content="@ogImage" />
  <meta name="fediverse:creator" content="@badgeRecord.IssuerFediverseHandle" />
</HeadContent>

<style>
    a {
        position: relative;
        z-index: 10;
    }
    .badge-container {
        max-width: 1000px;
        margin: 2rem auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }
    .verification-header {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        color: white;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }
    .verification-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
        opacity: 0.1;
    }
    .verification-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(16, 185, 129, 0.1);
        color: #10b981;
        padding: 0.75rem 1.5rem;
        border-radius: 30px;
        font-size: 1rem;
        font-weight: 500;
        margin-bottom: 1rem;
        border: 1px solid rgba(16, 185, 129, 0.2);
    }
    .badge-content {
        padding: 3rem;
    }
    .badge-image-container {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 16px;
        text-align: center;
        margin-bottom: 2rem;
    }
    .badge-image {
        max-height: 300px;
        margin: 0 auto;
    }
    .badge-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: #1a1a2e;
    }
    .badge-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 2rem;
    }
    .meta-item {
        background: #f3f4f6;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .meta-item i {
        color: #6b7280;
    }
    .badge-description {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #4b5563;
        margin-bottom: 2rem;
    }
    .badge-criteria {
        background: #f3f4f6;
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 2rem;
    }
    .criteria-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1a1a2e;
    }
    .security-info {
        background: #f3f4f6;
        padding: 1.5rem;
        border-radius: 12px;
        margin-top: 2rem;
    }
    .security-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1a1a2e;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .fingerprint {
        font-family: monospace;
        background: #1a1a2e;
        color: #10b981;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
        word-break: break-all;
    }
    .share-actions {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }
    .share-button {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 1rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    .share-button:hover {
        transform: translateY(-2px);
    }
    .linkedin-button {
        background: #0a66c2;
        color: white;
    }
    .mastodon-button {
        background: #6364ff;
        color: white;
    }
    .openbadge-button {
        background: #f59e0b;
        color: white;
    }
    .comments-section {
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid #e5e7eb;
    }
    .comment-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .comment-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .comment-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #f3f4f6;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .comment-author {
        font-weight: 600;
        color: #1a1a2e;
    }
    .comment-date {
        font-size: 0.875rem;
        color: #6b7280;
    }
</style>

<div class="badge-container">
    <div class="verification-header">
        <div class="verification-badge">
            <span class="icon"><i class="fas fa-shield-alt"></i></span>
            <span>Verified Badge</span>
        </div>
        <h1 class="title is-3 has-text-white">@badgeRecord.Title</h1>
        <p class="subtitle is-5 has-text-white-bis">Issued to <a href="@badgeRecord.IssuedToSubjectUri">@badgeRecord.IssuedToName</a> on @badgeRecord.IssuedOn.ToString("MMMM d, yyyy")</p>
    </div>

    <div class="badge-content">
        <div class="badge-image-container">
            <img src="@badgeRecord.FullImageUrl" alt="@badgeRecord.ImageAltText" class="badge-image">
        </div>

        <div class="badge-meta">
                <div class="meta-item">
                    <span class="icon"><i class="fas fa-user"></i></span>
                    <span>Issued by <a href="@actorUri" class="has-text-primary">@actorName</a></span>
                </div>
                <div class="meta-item">
                    <span class="icon"><i class="fas fa-calendar"></i></span>
                    <span>Accepted on @(badgeRecord.AcceptedOn?.ToString("MMMM d, yyyy") ?? "N/A")</span>
                </div>
            
                @if (badgeRecord.IsExternal)
                {
                    <div class="meta-item" style="background-color: #f0ad4e; color: white;">
                        <span class="icon"><i class="fas fa-external-link-alt"></i></span>
                        <span>External Issuer</span>
                    </div>
                }
                else
                {
                    <div class="meta-item">
                        <span class="icon"><i class="fas fa-tag"></i></span>
                        <span>@badge?.BadgeType</span>
                    </div>
                }
        </div>
        
        @if (badgeRecord.HashtagsList != null && badgeRecord.HashtagsList.Any())
        {
            <div class="hashtags mt-2">
                @foreach (var hashtag in badgeRecord.HashtagsList)
                {
                    <span class="tag is-small is-light">#@hashtag.Trim()</span>
                }
            </div>
        }

        <div class="badge-description">
            @badgeRecord.Description
        </div>

        <div class="badge-criteria">
            <h3 class="criteria-title">Earning Criteria</h3>
            <p>@((MarkupString)badgeRecord.EarningCriteria.Replace("\n", "<br />"))</p>
        </div>

        <div class="security-info">
            <h3 class="security-title">
                <span class="icon"><i class="fas fa-lock"></i></span>
                <span>Security Verification</span>
            </h3>
            <p>This badge has been cryptographically verified and is securely decentralized on the fediverse through ActivityPub.</p>
            <div class="fingerprint">
                @badgeRecord.FingerPrint.ToUpper()
            </div>
        </div>

        <div class="share-actions">
            <a href="@ShareHelper.GetMastodonShareLink(badgeRecord)" 
               class="share-button mastodon-button">
                <span class="icon"><i class="fab fa-mastodon"></i></span>
                <span>Share on Mastodon</span>
            </a>

            @{
                var linkedinShareLink = ShareHelper.GetLinkedInShareLink(badgeRecord);
            }
            @if(!string.IsNullOrEmpty(linkedinShareLink))
            {
                <a href="@ShareHelper.GetLinkedInShareLink(badgeRecord)" 
                class="share-button linkedin-button">
                    <span class="icon"><i class="fab fa-linkedin"></i></span>
                    <span>Share on LinkedIn</span>
                </a>
            }

            @{
                var badgeId = badgeRecord.NoteId.Split('/').LastOrDefault();
            }
            <a href="/openbadge/@badgeId" 
               class="share-button openbadge-button"
               download="openbadge_@(badgeId).json">
                <span class="icon"><i class="fas fa-certificate"></i></span>
                <span>Download OpenBadge</span>
            </a>

            @* Independent Verification Button *@
            @{
                var openBadgeUrl = $"{NavManager.BaseUri.TrimEnd('/')}/openbadge/{badgeRecord.NoteId.Split('/').LastOrDefault()}";
                var recipientUrl = badgeRecord.IssuedToSubjectUri;
                var verificationUrl = $"https://badgecheck.us.badgr.com/?url={openBadgeUrl}&identity__url={recipientUrl}";
            }
            <a href="@verificationUrl" 
               class="share-button verification-button" 
               target="_blank">
                <span class="icon"><i class="fas fa-check-circle"></i></span>
                <span>Verify Independently</span>
            </a>
        </div>
    </div>
</div>

@if (badgeRecord.IsExternal)
{
    <div class="notification is-warning">
        This badge was issued externally. You can view it on the original platform by clicking the button below.
        <a href="@badgeRecord.NoteId" class="button is-light">View Badge</a>
    </div>
} else {
    <div class="badge-container comments-section">
        <h3 class="title is-4" style="margin-left: 1.5em">Comments</h3>
        
        <div class="mb-3" style="margin-left: 1.5em">
            <p>To leave a comment, reply to this badge from your Fediverse account. Just copy the badge URL and paste it into your post.</p>
        </div>
        @if (comments == null || !comments.Any())
        {
            <div class="has-text-centered py-4">
                <p class="has-text-grey">No comments yet. Be the first to comment!</p>
            </div>
        }
        else
        {
            <script>
                var comments = @((MarkupString)@JsonSerializer.Serialize(comments));
            
                function getStatusUrl(originalUrl) {
                    // Parse the original URL
                    let url = new URL(originalUrl);
                    
                    // Extract the host and id
                    let host = url.host;
                    let id = url.pathname.split('/').pop(); // Extract the id from the last part of the pathname
                    
                    // Construct the modified URL
                    let modifiedUrl = "https://" + host + "/api/v1/statuses/" + id;
                    
                    return modifiedUrl;
                }

                document.addEventListener('DOMContentLoaded', function() {
                    var commentsWrapper = document.querySelector(".comments-wrapper");

                    if (comments && comments.length > 0) {
                        Promise.all(
                            comments.map(replyId => 
                                fetch(getStatusUrl(replyId), {
                                    headers: { 
                                        'Content-Type': 'application/activity+json', 
                                        'Accept': 'application/activity+json' 
                                    }
                                })
                                .then(response => response.ok ? response.json() : null)
                                .catch(() => null)
                            )
                        ).then(responses => {
                            const validResponses = responses.filter(r => r);
                            validResponses.sort((a, b) => new Date(a.published) - new Date(b.published));
                            
                            if (validResponses.length > 0) {
                                commentsWrapper.innerHTML = validResponses.map(status => {
                                    return `
                                        <div class="comment-card">
                                            <div class="comment-header">
                                                <div class="comment-avatar">
                                                    <span class="icon"><img src="${status.account.avatar}" /></span>
                                                </div>
                                                <div>
                                                    <div class="comment-author">${status.account ? status.account.display_name || status.account.acct : 'Anonymous'}</div>
                                                    <div class="comment-date">${status.created_at}</div>
                                                </div>
                                            </div>
                                            <div class="comment-content">
                                                ${status.content || ''}
                                            </div>
                                        </div>
                                    `;
                                }).join("");
                            }
                        });
                    }
                });
            
            </script>
            <div class="comments-wrapper">
                <div class="comment-card">
                    <div class="comment-header">
                        <div class="comment-avatar">
                            <span class="icon"><i class="fas fa-user"></i></span>
                        </div>
                        <div>
                            <div class="comment-author"></div>
                            <div class="comment-date"></div>
                        </div>
                    </div>
                    <div class="comment-content">
                    
                    </div>
                </div>
            </div>
            
        }
    </div>
}

@code {
    private List<string> comments = new List<string>();
    [Parameter] public string? NoteIdParam { get; set; }
    private BadgeRecord? badgeRecord;
    private Badge? badge;
    private Uri actorUri;

    private string actorName = string.Empty;
    private string ogImage = string.Empty;

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", NavManager.Uri);
    }

    protected override async Task OnInitializedAsync()
    {
        var acceptHeader = HttpContextAccessor.HttpContext?.Request.Headers["Accept"].ToString();

        NoteIdParam = NoteIdParam?.Trim();

        if (BadgeFed.Core.ActivityPubHelper.IsActivityPubRequest(acceptHeader))
        {

            NavManager.NavigateTo($"/grant/{NoteIdParam}");
        }
        
        badgeRecord = DbService.GetGrantByNoteId(NoteIdParam);

        if (badgeRecord == null)
        {
            return;
        }

        if (badgeRecord.IsExternal) {
            actorUri = new Uri(badgeRecord.IssuedBy);
         
            var issuer = DbService.GetFollowedIssuerByUrl(badgeRecord.IssuedBy);

            if (issuer != null)
            {
                actorName = issuer.Name + "@" + actorUri.Host;
            } else {
                actorName = badgeRecord.IssuedBy.Split('/').LastOrDefault() ?? string.Empty + "@" + actorUri.Host;
            }

            ogImage = badgeRecord.FullImageUrl;
        } else {
            badge = DbService.GetBadgeDefinitionById(badgeRecord.Badge.Id);
            badgeRecord.Badge = badge;
            badgeRecord.Actor = DbService.GetActorById(badge.IssuedBy);
            actorUri = badgeRecord.Actor.Uri;
            actorName = badgeRecord.Actor.FullName;

            var extension = Path.GetExtension(badgeRecord.Image);
            var directory = Path.GetDirectoryName(badgeRecord.Image);
            var filename = Path.GetFileNameWithoutExtension(badgeRecord.Image);
            var ogFileImage = Path.Combine(directory ?? "", $"{filename}-share{extension}");

            ogImage = $"{NavManager.BaseUri.TrimEnd('/')}{ogFileImage}";

            comments = DbService.GetBadgeComments(badgeRecord.Id);
        }
    }
}