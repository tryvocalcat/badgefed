@page "/admin/grant/{badgeId}"
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@inject LocalScopedDb LocalDbService
@inject IConfiguration Configuration
@inject BadgeService BadgeService
@rendermode InteractiveServer

@layout BadgeFed.Components.Layouts.AdminLayout

@attribute [Authorize(Roles = "admin, manager")]

<div class="mb-4">
    <a href="/admin/badges" class="button is-light">
        <span class="icon">
            <i class="fas fa-arrow-left"></i>
        </span>
        <span>Back to Manage Badges</span>
    </a>
</div>

<section class="section">
    <div class="container">
        <h1 class="title">Grant Badge</h1>

        @if(!string.IsNullOrEmpty(errorMessage))
        {
            <div class="notification is-danger mb-4">
                <button class="delete" @onclick="() => errorMessage = string.Empty"></button>
                @errorMessage
            </div>
        }

        @if(!string.IsNullOrEmpty(notificationMessage) && string.IsNullOrEmpty(ProfileUri))
        {
            <div class="notification is-info mb-4">
                <button class="delete" @onclick="() => notificationMessage = string.Empty"></button>
                @notificationMessage
            </div>
        }

        <form @onsubmit="HandleValidSubmit">
           
             <div class="field">
                <label class="label">Recipient</label>
               
                <p class="help">All grants generate a unique link to accept the grant, independently if the following fields are provided.</p>
                
                 <div class="mt-3">
                    <label class="label">Profile URL (optional)</label>
                    <p class="help">If provided and it is a fediverse actor url, we'll send a notification to this fediverse account when a badge is granted. <br />
                        This value <strong>cannot</strong> be modified during badge acceptance.
                    </p>
                    <div class="control">
                        <InputText id="profileUri" @bind-Value="ProfileUri" class="input" placeholder="https://..." />
                    </div>
                </div>

                <div class="mt-3">
                    <label class="label">Name (optional)</label>
                    <p class="help">The user can change the name when accepting the badge and it is public information.</p>
                    <div class="control">
                        <InputText id="name" @bind-Value="Name" class="input" placeholder="John Doe" />
                    </div>
                </div>

                <div class="mt-3">
                    <label class="label">Email (optional)</label>
                    <p class="help">
                        If email is provided, the system will send an email with the link to accept the grant. <br />
                        If provided it will be used to verify recipient. 
                        This value is not of public record. <br />
                    </p>
                    <div class="control">
                        <InputText id="email" @bind-Value="Email" class="input" placeholder="recipient@example.com" />
                    </div>
                </div>

                <div class="mt-3">
                    <label class="label">Evidence</label>
                    <p class="help">
                        Optional details about why this badge is being granted. 
                        This can include links to related work, specific achievements, or any other information that supports this award.
                        This information is publicy visible and cannot be changed after the badge is granted.
                    </p>
                        
                    <div class="control">
                        <InputTextArea id="evidence" @bind-Value="Model.Evidence" class="textarea" placeholder="Evidence of the badge" rows="3" />
                    </div>
                </div>
            </div>

            <div class="field">
                <div class="control">
                    <button type="submit" class="button is-primary">Grant Badge</button>
                </div>
            </div>
           
        </form>
    </div>
</section>

@code {
    [Parameter]
    public string BadgeId { get; set; }

    private BadgeGrant Model = new();

    private string Email { get; set; }

    private string ProfileUri { get; set; }

    private string Name { get; set; }
   
    private string errorMessage;

    private string notificationMessage;

    protected override async Task OnInitializedAsync()
    {
        if (long.TryParse(BadgeId, out long badgeIdValue))
        {
            Model.BadgeId = badgeIdValue;

            var badge = LocalDbService.GetBadgeDefinitionById(Model.BadgeId);

            if (badge == null)
            {
                errorMessage = $"Badge with ID {Model.BadgeId} not found.";
                return;
            }
            else
            {
                Model.Evidence = badge.EarningCriteria;
            }
        }
        else
        {
            errorMessage = $"Invalid badge ID format: {BadgeId}";
            NavigationManager.NavigateTo("/admin/badges");
        }
    }

    public class BadgeGrant
    {
        public long BadgeId { get; set; }

        public string IssuedTo { get; set; } = "";

        public string Evidence { get; set; } = "";
    }

    private void HandleValidSubmit()
    {
        errorMessage = string.Empty;
        notificationMessage = string.Empty;

        var badge = LocalDbService.GetBadgeDefinitionById(Model.BadgeId);

        var recipient = new Recipient() { ProfileUri = ProfileUri, Name = Name, Email = Email };

        //FIXME: sec issue
        if (string.IsNullOrEmpty(ProfileUri) && string.IsNullOrEmpty(Email))
        {
            errorMessage = "Either Profile URI or Email must be provided.";
            return;
        }

        var sqlExisting = $"BadgeId = {Model.BadgeId}";

        if (string.IsNullOrEmpty(ProfileUri))
        {
            sqlExisting += $" AND IssuedToEmail = '{Email}'";
        }
        else
        {
            sqlExisting += $" AND IssuedToSubjectUri = '{ProfileUri}'";
        }

        var existing = LocalDbService.GetBadgeRecords(sqlExisting);

        if (existing != null && existing.Count > 0)
        {
            errorMessage = $"Badge {badge.Title} has already been granted to {recipient.ProfileUri}";
            return;
        }

        var badgeRecord = BadgeService.GetGrantBadgeRecord(badge!, recipient);

        badgeRecord.EarningCriteria = Model.Evidence;

        LocalDbService.CreateBadgeRecord(badgeRecord);

        notificationMessage = $"Badge {badgeRecord.Title} granted to {recipient.Name} ({recipient.ProfileUri})";
        
        // Clear form fields
        Email = string.Empty;
        ProfileUri = string.Empty;
        Name = string.Empty;
    }
}